#!/usr/bin/python

class Tree:

	def __init__(self, text, SA, LCP):
		self.current_node = 0
		self.node_count = 1
		self.edge_map = {} # tuple (parent, child) => tuple (index, length)
		self.node_parent_map = [None] # node => parent
		self.text = text
		self._build(text, SA, LCP + [LCP[-1]])
	
	def _build(self, text, SA, LCP):
		for index in xrange(len(SA)):
			if LCP[index+1] - LCP[index] <= 0:
				prev_length = self._get_string_length(self.current_node)
				self._add_edge(self.current_node, SA[index]+prev_length, len(text)-SA[index]-prev_length)
				self._reverse_current(LCP[index+1]-LCP[index])
			else:
				prev_length = self._get_string_length(self.current_node)
				self.current_node = self._add_edge(self.current_node, SA[index]+LCP[index], LCP[index+1] - LCP[index])
				self._add_edge(self.current_node, SA[index]+LCP[index+1], len(text)-SA[index]-LCP[index+1])
	
	def _add_edge(self, parent, index, length):
		child = self.node_count
		self.node_count+=1
		self.edge_map[(parent, child)] = (index, length)
		self.node_parent_map.append(parent)
		return child
	
	def _get_string_length(self, node):
		length = 0
		while self.node_parent_map[node] != None:
			parent = self.node_parent_map[node]
			edge = self.edge_map[(parent, node)]
			length += edge[1]
			node = parent
		return length

	def _reverse_current(self, reverse_length):
		length = 0
		self.current_node = 0
		"""
		while reverse_length > length:
			parent = self.node_parent_map[self.current_node]
			edge = self.edge_map[(parent, self.current_node)]
			length += edge[1]
			self.current_node = parent
		"""

	def __str__(self):
		edges = []
		for edge in self.edge_map.keys():
			value = self.edge_map[edge]
			edges.append(self.text[value[0]:value[0]+value[1]])
			edges.append(str(edge[0]) + "," + str(edge[1]) + "," + str(value[0]) + "," + str(value[1]))
		return '\n'.join(edges)

def build_tree(text, SA, LCP):
	tree = Tree(text, SA, LCP)
	return tree

read = [line[:-1] for line in open("input.txt", "r")]
print build_tree(read[0], map(int, read[1].split(", ")), map(int, read[2].split(", ")))
